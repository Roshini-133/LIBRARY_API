openapi: 3.0.0
info:
  title: A minimal OpenAPI Description
  version: 0.1.0
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    BookDetails:
      type: object
      required: '-bookId -bookName -author -quantity'
      properties:
        bookId:
          type: number
        bookName:
          type: string
        author:
          type: string
        quantity:
          type: number
    ResponseMessage:
      type: object
      required: '-message'
      properties:
        message:
          type: string
    ErrorMessage:
      type: object
      required: '-message -statusCode'
      properties:
        message:
          type: string
        statusCode:
          type: number
    SpecificBookDetails:
      type: object
      required: '-bookId'
      properties:
        bookId:
          type: number
        bookName:
          type: string
        author:
          type: string
        quantity:
          type: number
    StudentDetails:
      type: object
      required: '-rollNo -name -department'
      properties:
        rollNo:
          type: number
        name:
          type: string
        department:
          type: string
    SpecificStudentDetails:
      type: object
      required: '-rollNo'
      properties:
        rollNo:
          type: number
        name:
          type: string
        department:
          type: string
    IssueBookDetails:
      type: object
      required: '-bookId -rollNo -issueDate'
      properties:
        bookId:
          type: number
        rollNo:
          type: number
        issueDate:
          type: date
paths:
  /book_details:
    post:
      summary: Add the book details
      operationId: addBookDetails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDetails'
      responses:
        '201':
          description: Book details have added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '409':
          description: This details of the book already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    get:
      summary: Retrieve the book details based on ID
      operationId: getSpecificBookDetail
      parameters:
        '-in': path
        name: bookId
        required: true
        description: The ID of the book to retrieve.
        schema:
          type: integer
      responses:
        '200':
          description: Details of the specific book has displayed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '404':
          description: The specified book is not available in the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      summary: Update the book details based on ID
      operationId: updateSpecificBookDetail
      parameters:
        '-in': path
        name: bookId
        required: true
        description: The ID of the book to update.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecificBookDetails'
      responses:
        '200':
          description: Details of the specific book has updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '404':
          description: The specified book is not available in the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      summary: Delete the book details based on ID
      operationId: deleteSpecificBookDetail
      parameters:
        '-in': path
        name: bookId
        required: true
        description: The ID of the book to delete.
        schema:
          type: integer
      responses:
        '204':
          description: Details of the specific book has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '404':
          description: The specified book is not available in the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /display_all_books:
    get:
      summary: Retrieve all the book details
      operationId: getAllBooks
      responses:
        '200':
          description: List of all the available books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '404':
          description: There is no book available in the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /student_details:
    post:
      summary: Add the student details
      operationId: addStudentDetails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentDetails'
      responses:
        '201':
          description: Student details have added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '409':
          description: The detail of the student already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    get:
      summary: Retrieve the student details based on ID
      operationId: getSpecificStudentDetail
      parameters:
        '-in': path
        name: rollNo
        required: true
        description: The ID of the student to retrieve.
        schema:
          type: integer
      responses:
        '200':
          description: Details of the specific student has displayed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '404':
          description: The specified student's detail is not available in the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      summary: Update the student details based on ID
      operationId: updateSpecificstudentDetail
      parameters:
        '-in': path
        name: rollNo
        required: true
        description: The ID of the student to update.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecificStudentDetails'
      responses:
        '200':
          description: Details of the specific student has updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '404':
          description: The specified student is not available in the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      summary: Delete the student details based on ID
      operationId: deleteSpecificstudentDetail
      parameters:
        '-in': path
        name: rollNo
        required: true
        description: The ID of the student to delete.
        schema:
          type: integer
      responses:
        '204':
          description: Details of the specific stduent has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '404':
          description: The specified stduent's detail is not available in the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /display_all_students:
    get:
      summary: Retrieve all the student details
      operationId: getAllstudents
      responses:
        '200':
          description: List of all the available stduents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '404':
          description: There is no student available in the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /issue_book_details:
    post:
      summary: Add the issue book details
      operationId: issueBookDetails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBookDetails'
      responses:
        '201':
          description: Issued book details have added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '409':
          description: This details of the book already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /return_book_details:
    put:
      summary: Update the return book details and calculate the fine amount
      operationId: returnBookDetail
      parameters:
        '-in': path
        name: bookId
        required: true
        description: The ID of the book to update.
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBookDetails'
      responses:
        '200':
          description: Details of the specific book has updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '404':
          description: The specified book is not available in the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
